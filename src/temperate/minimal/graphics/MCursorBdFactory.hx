package temperate.minimal.graphics;
import flash.display.BitmapData;

class MCursorBdFactory 
{
	public static function getHandUp()
	{
		if (!_generated)
		{
			generate();
		}
		return _handUp;
	}
	
	public static function getHandDown()
	{
		if (!_generated)
		{
			generate();
		}
		return _handDown;
	}
	
	public static function getForbidden()
	{
		if (!_generated)
		{
			generate();
		}
		return _forbidden;
	}
	
	public static function getResize()
	{
		if (!_generated)
		{
			generate();
		}
		return _resize;
	}
	
	public static function getWait()
	{
		if (!_generated)
		{
			generate();
		}
		return _wait;
	}
	
	static var _generated = false;
	static var _handUp:BitmapData;
	static var _handDown:BitmapData;
	static var _forbidden:BitmapData;
	static var _resize:BitmapData;
	static var _wait:BitmapData;
	
	static function generate()
	{
		_generated = true;
		_handUp = MBdInlineUtil.decode(
			[0x14, 0x18, 0x37, 0x0, 0x6f000000, 0x5, 0xbf000000, 
			0x9f000000, 0x5, 0xbf000000, 0x6f000000, 0x15, 0x0, 0x6f000000, 
			0x5, 0xbf000000, 0xef000000, 0xff6f6f6e, 0xff8f8f8e, 0xff000000, 0xff6f6f6e, 
			0xff8f8f8e, 0xcf000000, 0x15, 0x0, 0xbf000000, 0xff6f6f6e, 0xff8f8f8e, 
			0xff000000, 0x5, 0xffdfdfde, 0xff000000, 0x5, 0xffdfdfde, 0xff000000, 
			0x5, 0xbf000000, 0x6f000000, 0xf, 0x0, 0xef000000, 0x5, 
			0xffdfdfde, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 
			0xff000000, 0xff6f6f6e, 0xff8f8f8e, 0xcf000000, 0xf, 0x0, 0xff000000, 
			0x5, 0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 
			0xfffffffe, 0xff000000, 0x5, 0xffdfdfde, 0xff000000, 0xf, 0x0, 
			0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 
			0x5, 0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 0xf, 
			0x0, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 
			0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 
			0xf, 0x0, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 
			0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 
			0xff000000, 0xf, 0x0, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 
			0x5, 0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 
			0xfffffffe, 0xff000000, 0x7, 0x0, 0x8f000000, 0xdf000000, 0x5f000000, 
			0x0, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 
			0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 
			0x7, 0x0, 0xff000000, 0xff9f9f9e, 0xff1f1f1e, 0xbf000000, 0xff000000, 
			0x5, 0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 
			0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x7, 0x0, 
			0xff000000, 0x5, 0xfffffffe, 0x5, 0xff000000, 0x5, 0xfffffffe, 
			0xffbfbfbe, 0xb, 0xfffffffe, 0xffbfbfbe, 0x5, 0xfffffffe, 0xff000000, 
			0x7, 0x0, 0xff000000, 0x5, 0xfffffffe, 0x5, 0xff000000, 
			0x17, 0xfffffffe, 0xff000000, 0x7, 0x0, 0xff000000, 0x5, 
			0xfffffffe, 0xff5f5f5e, 0xff000000, 0x17, 0xfffffffe, 0xff000000, 0x7, 
			0x0, 0xff000000, 0x7, 0xfffffffe, 0xff1f1f1e, 0x17, 0xfffffffe, 
			0xff000000, 0x7, 0x0, 0xff000000, 0x7, 0xfffffffe, 0xff9f9f9e, 
			0x17, 0xfffffffe, 0xff000000, 0x7, 0x0, 0xdf000000, 0xff8f8f8e, 
			0x5, 0xfffffffe, 0xffefefee, 0x17, 0xfffffffe, 0xff000000, 0x7, 
			0x0, 0x2f000000, 0xcf000000, 0xff5f5f5e, 0x1b, 0xfffffffe, 0xff000000, 
			0x9, 0x0, 0xf000000, 0xbf000000, 0xff2f2f2e, 0xffefefee, 0x17, 
			0xfffffffe, 0xff000000, 0xd, 0x0, 0x9f000000, 0xff1f1f1e, 0xffcfcfce, 
			0x13, 0xfffffffe, 0xff8f8f8e, 0xaf000000, 0xf, 0x0, 0x5f000000, 
			0xff0f0f0e, 0xffafafae, 0xf, 0xfffffffe, 0xff9f9f9e, 0xcf000000, 0x1f000000, 
			0x11, 0x0, 0x3f000000, 0xef000000, 0xf, 0xff000000, 0xbf000000, 
			0xf000000, 0x2f, 0x0, 0x0]);
		_handDown = MBdInlineUtil.decode(
			[0x14, 0x18, 0xff, 0x0, 0x6f000000, 0x5, 0xbf000000, 
			0x9f000000, 0x5, 0xbf000000, 0x6f000000, 0x15, 0x0, 0x6f000000, 
			0x5, 0xbf000000, 0xef000000, 0xff6f6f6e, 0xff8f8f8e, 0xff000000, 0xff6f6f6e, 
			0xff8f8f8e, 0xef000000, 0x5, 0xbf000000, 0x6f000000, 0xf, 0x0, 
			0xbf000000, 0xff6f6f6e, 0xff8f8f8e, 0xff000000, 0x5, 0xffdfdfde, 0xff000000, 
			0x5, 0xffdfdfde, 0xff000000, 0xff6f6f6e, 0xff8f8f8e, 0xcf000000, 0xf, 
			0x0, 0xef000000, 0x5, 0xffdfdfde, 0xff000000, 0x5, 0xfffffffe, 
			0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 0xffdfdfde, 0xff000000, 
			0xf, 0x0, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 
			0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 
			0xff000000, 0xb, 0x0, 0xcf000000, 0xbf000000, 0xff000000, 0x5, 
			0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x5, 0xfffffffe, 
			0xff000000, 0x5, 0xfffffffe, 0xff000000, 0x9, 0x0, 0x5f000000, 
			0xff1f1f1e, 0xff3f3f3e, 0xff000000, 0x5, 0xfffffffe, 0xffbfbfbe, 0xb, 
			0xfffffffe, 0xffbfbfbe, 0x5, 0xfffffffe, 0xff000000, 0x9, 0x0, 
			0xdf000000, 0xff9f9f9e, 0xffbfbfbe, 0xff000000, 0x17, 0xfffffffe, 0xff000000, 
			0x7, 0x0, 0x5f000000, 0xff1f1f1e, 0x5, 0xfffffffe, 0xff000000, 
			0x17, 0xfffffffe, 0xff000000, 0x7, 0x0, 0xdf000000, 0xff9f9f9e, 
			0x5, 0xfffffffe, 0xff1f1f1e, 0x17, 0xfffffffe, 0xff000000, 0x7, 
			0x0, 0xdf000000, 0xff9f9f9e, 0x5, 0xfffffffe, 0xff9f9f9e, 0x17, 
			0xfffffffe, 0xff000000, 0x7, 0x0, 0x2f000000, 0xef000000, 0xff9f9f9e, 
			0xfffffffe, 0xffefefee, 0x17, 0xfffffffe, 0xff000000, 0x9, 0x0, 
			0x2f000000, 0xef000000, 0xff9f9f9e, 0x19, 0xfffffffe, 0xff000000, 0xb, 
			0x0, 0x2f000000, 0xef000000, 0xff9f9f9e, 0x17, 0xfffffffe, 0xff000000, 
			0xd, 0x0, 0x2f000000, 0xef000000, 0xff9f9f9e, 0x13, 0xfffffffe, 
			0xff8f8f8e, 0xaf000000, 0xf, 0x0, 0x2f000000, 0xef000000, 0xff9f9f9e, 
			0xf, 0xfffffffe, 0xff9f9f9e, 0xcf000000, 0x1f000000, 0x11, 0x0, 
			0x2f000000, 0xef000000, 0xf, 0xff000000, 0xbf000000, 0xf000000, 0x2f, 
			0x0, 0x0]);
		_forbidden = MBdInlineUtil.decode(
			[0x18, 0x18, 0xb, 0x0, 0x1f000000, 0x5f000000, 0xb0000000, 
			0xc1000000, 0x7, 0xc2000000, 0xb3000000, 0x66000000, 0x26000000, 0x4000000, 
			0x1000000, 0x15, 0x0, 0xf000000, 0x6f000000, 0xef090908, 0xff303030, 
			0xff505050, 0x9, 0xff606060, 0xff505050, 0xff303030, 0xf1080808, 0x7e000000, 
			0x1d000000, 0x5000000, 0x11, 0x0, 0xf000000, 0xcf000000, 0xff383838, 
			0xff787878, 0x11, 0xff808080, 0xff787878, 0xff383838, 0xd8000000, 0x1c000000, 
			0xa000000, 0x1000000, 0xd, 0x0, 0x9f000000, 0xff404040, 0x5, 
			0xff808080, 0xff707070, 0xff383838, 0x9, 0xff202020, 0xff383838, 0xff707070, 
			0x5, 0xff808080, 0xff404040, 0xb9000000, 0x23000000, 0xa000000, 0x1000000, 
			0x9, 0x0, 0x5f000000, 0xff282828, 0x5, 0xff808080, 0xff787878, 
			0xff101010, 0xe6000000, 0x9b000000, 0x97000000, 0x5, 0x94000000, 0xb8000000, 
			0xf6080808, 0xff383838, 0x5, 0xff808080, 0xff282828, 0x8b000000, 0x1f000000, 
			0x7000000, 0x7, 0x0, 0xf000000, 0xef000000, 0xff707070, 0x7, 
			0xff808080, 0xff686868, 0xff080808, 0xa7000000, 0x60000000, 0x4e000000, 0x47000000, 
			0x48000000, 0x50000000, 0xcd000000, 0xff505050, 0xff808080, 0xff707070, 0xf5000000, 
			0x48000000, 0x17000000, 0x3000000, 0x5, 0x0, 0x6f000000, 0xff303030, 
			0xff808080, 0xff787878, 0xff202020, 0xff787878, 0xff808080, 0xff686868, 0xff080808, 
			0x93000000, 0x32000000, 0x1e000000, 0x1a000000, 0x21000000, 0x4a000000, 0xf4080808, 
			0xff787878, 0xff808080, 0xff303030, 0xa2000000, 0x2e000000, 0xc000000, 0x5, 
			0x0, 0xb0000000, 0xff585858, 0xff808080, 0xff383838, 0xef000000, 0xff181818, 
			0xff787878, 0xff808080, 0xff686868, 0xff080808, 0x85000000, 0x1b000000, 0x9000000, 
			0x6000000, 0xe000000, 0x93000000, 0xff383838, 0xff808080, 0xff585858, 0xd1000000, 
			0x45000000, 0x19000000, 0x3000000, 0x0, 0xef000000, 0xff787878, 0xff808080, 
			0xff101010, 0x94000000, 0xcb000000, 0xff181818, 0xff787878, 0xff808080, 0xff686868, 
			0xff080808, 0x83000000, 0x18000000, 0x6000000, 0x2000000, 0x3c000000, 0xff101010, 
			0xff808080, 0xff787878, 0xf6000000, 0x56000000, 0x26000000, 0x7000000, 0x0, 
			0xff000000, 0x5, 0xff808080, 0xff000000, 0x75000000, 0x60000000, 0xc0000000, 
			0xff181818, 0xff787878, 0xff808080, 0xff686868, 0xff080808, 0x83000000, 0x18000000, 
			0x6000000, 0x7000000, 0xff000000, 0x5, 0xff808080, 0xff000000, 0x63000000, 
			0x31000000, 0xa000000, 0x0, 0xff000000, 0x5, 0xff808080, 0xff000000, 
			0x6f000000, 0x48000000, 0x31000000, 0xb9000000, 0xff181818, 0xff787878, 0xff808080, 
			0xff686868, 0xff080808, 0x83000000, 0x18000000, 0x8000000, 0xff000000, 0x5, 
			0xff808080, 0xff000000, 0x6a000000, 0x37000000, 0xc000000, 0x0, 0xf0000000, 
			0xff787878, 0xff808080, 0xff101010, 0x7e000000, 0x3d000000, 0x17000000, 0x20000000, 
			0xb8000000, 0xff181818, 0xff787878, 0xff808080, 0xff686868, 0xff080808, 0x83000000, 
			0x34000000, 0xff101010, 0xff808080, 0xff787878, 0xf7000000, 0x6c000000, 0x39000000, 
			0xc000000, 0x0, 0xc3000000, 0xff585858, 0xff808080, 0xff303030, 0xa4000000, 
			0x3f000000, 0x12000000, 0xa000000, 0x20000000, 0xb8000000, 0xff181818, 0xff787878, 
			0xff808080, 0xff686868, 0xff080808, 0xc1000000, 0xff303030, 0xff808080, 0xff585858, 
			0xde000000, 0x69000000, 0x37000000, 0xc000000, 0x0, 0x76000000, 0xff383838, 
			0xff808080, 0xff707070, 0xf6000000, 0x55000000, 0x1c000000, 0x5000000, 0x8000000, 
			0x20000000, 0xb8000000, 0xff181818, 0xff787878, 0xff808080, 0xff686868, 0xff080808, 
			0xff707070, 0xff808080, 0xff383838, 0xb4000000, 0x62000000, 0x31000000, 0xa000000, 
			0x0, 0x27000000, 0xf2080808, 0xff787878, 0xff808080, 0xff404040, 0xcc000000, 
			0x3d000000, 0xe000000, 0x2000000, 0x8000000, 0x20000000, 0xb8000000, 0xff181818, 
			0xff787878, 0xff808080, 0xff787878, 0xff808080, 0xff787878, 0xf7080808, 0x86000000, 
			0x55000000, 0x25000000, 0x7000000, 0x0, 0x4000000, 0x8e000000, 0xff383838, 
			0x5, 0xff808080, 0xff404040, 0xf4080808, 0x78000000, 0x1d000000, 0x5000000, 
			0x9000000, 0x2d000000, 0xdc000000, 0xff202020, 0x7, 0xff808080, 0xff383838, 
			0xbd000000, 0x6d000000, 0x44000000, 0x18000000, 0x3000000, 0x0, 0x1000000, 
			0xf000000, 0xcc000000, 0xff484848, 0x5, 0xff808080, 0xff686868, 0xff282828, 
			0x9, 0xff000000, 0xff282828, 0xff686868, 0x5, 0xff808080, 0xff484848, 
			0xde000000, 0x76000000, 0x5a000000, 0x2d000000, 0xc000000, 0x1000000, 0x5, 
			0x0, 0x5000000, 0x29000000, 0xc4000000, 0xff202020, 0xff787878, 0x11, 
			0xff808080, 0xff787878, 0xff202020, 0xd6000000, 0x7f000000, 0x64000000, 0x3d000000, 
			0x16000000, 0x3000000, 0x9, 0x0, 0x9000000, 0x23000000, 0x97000000, 
			0xff080808, 0xff404040, 0xff707070, 0x9, 0xff808080, 0xff707070, 0xff404040, 
			0xff080808, 0xb5000000, 0x76000000, 0x62000000, 0x41000000, 0x1d000000, 0x7000000, 
			0xb, 0x0, 0x1000000, 0xb000000, 0x21000000, 0x57000000, 0xae000000, 
			0xed000000, 0x9, 0xff000000, 0xef000000, 0xbd000000, 0x88000000, 0x6e000000, 
			0x59000000, 0x3b000000, 0x1c000000, 0x8000000, 0x1000000, 0xd, 0x0, 
			0x1000000, 0x8000000, 0x19000000, 0x32000000, 0x4a000000, 0x5c000000, 0x67000000, 
			0x5, 0x6c000000, 0x6b000000, 0x66000000, 0x5a000000, 0x46000000, 0x2d000000, 
			0x15000000, 0x6000000, 0x1000000, 0x13, 0x0, 0x4000000, 0xe000000, 
			0x1c000000, 0x2b000000, 0x35000000, 0x39000000, 0x3a000000, 0x39000000, 0x34000000, 
			0x29000000, 0x1a000000, 0xc000000, 0x3000000, 0x19, 0x0, 0x1000000, 
			0x4000000, 0x8000000, 0xb000000, 0xc000000, 0xd000000, 0xc000000, 0xb000000, 
			0x8000000, 0x4000000, 0x1000000, 0x3d, 0x0, 0x0]);
		_resize = MBdInlineUtil.decode(
			[0x14, 0x14, 0xff181818, 0xb, 0xff000000, 0xd2000000, 0xe000000, 
			0x7000000, 0x1000000, 0x15, 0x0, 0xff000000, 0x5, 0xff808080, 
			0xe7737372, 0xe71a1a1a, 0xf3000000, 0x7a000000, 0x31000000, 0x17000000, 0x4000000, 
			0x15, 0x0, 0xff000000, 0x5, 0xff808080, 0xf6191918, 0xd1000000, 
			0x6f000000, 0x5b000000, 0x40000000, 0x1c000000, 0x5000000, 0x15, 0x0, 
			0xff000000, 0xd0757574, 0xf6292928, 0xff606060, 0xe5090908, 0x70000000, 0x4b000000, 
			0x29000000, 0xe000000, 0x2000000, 0x15, 0x0, 0xff000000, 0xb7161616, 
			0xb3000000, 0xf6191918, 0xff606060, 0xe2090908, 0x49000000, 0x18000000, 0x4000000, 
			0x17, 0x0, 0xff000000, 0xc2000000, 0x5d000000, 0x7a000000, 0xf5191918, 
			0xff606060, 0xde090908, 0x35000000, 0xd000000, 0x1000000, 0x15, 0x0, 
			0xc3000000, 0x46000000, 0x4d000000, 0x3e000000, 0x60000000, 0xf4191918, 0xff606060, 
			0xdd090908, 0x34000000, 0xc000000, 0x1000000, 0x13, 0x0, 0xd000000, 
			0x2b000000, 0x33000000, 0x1e000000, 0x18000000, 0x57000000, 0xf4191918, 0xff606060, 
			0xdd090908, 0x34000000, 0xc000000, 0x1000000, 0x11, 0x0, 0x6000000, 
			0x13000000, 0x15000000, 0x9000000, 0x4000000, 0x12000000, 0x56000000, 0xf4191918, 
			0xff606060, 0xdd090908, 0x34000000, 0xc000000, 0x1000000, 0xf, 0x0, 
			0x1000000, 0x5, 0x3000000, 0x1000000, 0x0, 0x3000000, 0x12000000, 
			0x56000000, 0xf4191918, 0xff606060, 0xdd090908, 0x34000000, 0xc000000, 0x1000000, 
			0x19, 0x0, 0x3000000, 0x12000000, 0x56000000, 0xf4191918, 0xff606060, 
			0xdd090908, 0x34000000, 0xc000000, 0x1000000, 0x3f414140, 0xdf000000, 0x7000000, 
			0x5000000, 0x1000000, 0xf, 0x0, 0x3000000, 0x12000000, 0x56000000, 
			0xf4191918, 0xff606060, 0xdd090908, 0x34000000, 0x1b4c4c4c, 0xdf121212, 0xff000000, 
			0x22000000, 0x18000000, 0x6000000, 0x11, 0x0, 0x3000000, 0x12000000, 
			0x56000000, 0xf4191918, 0xff606060, 0xdd090908, 0xae171716, 0xff101010, 0xff000000, 
			0x46000000, 0x2d000000, 0xb000000, 0x13, 0x0, 0x3000000, 0x12000000, 
			0x56000000, 0xf4191918, 0xff606060, 0xff202020, 0xff606060, 0xff000000, 0x5e000000, 
			0x38000000, 0xc000000, 0x15, 0x0, 0x3000000, 0x12000000, 0xb1393938, 
			0xff282828, 0x5, 0xff808080, 0xff000000, 0x69000000, 0x3a000000, 0xd000000, 
			0x15, 0x0, 0x2f828282, 0xd03b3b3a, 0xff282828, 0xff707070, 0x5, 
			0xff808080, 0xff000000, 0x6c000000, 0x3a000000, 0xd000000, 0x15, 0x0, 
			0x9f000000, 0xb, 0xff000000, 0xf7000000, 0x6c000000, 0x39000000, 0xd000000, 
			0x15, 0x0, 0x5000000, 0x1c000000, 0x3f000000, 0x5b000000, 0x68000000, 
			0x5, 0x6c000000, 0x5b000000, 0x30000000, 0xa000000, 0x15, 0x0, 
			0x4000000, 0x13000000, 0x29000000, 0x36000000, 0x39000000, 0x3a000000, 0x39000000, 
			0x30000000, 0x19000000, 0x5000000, 0x15, 0x0, 0x1000000, 0x5000000, 
			0x9000000, 0xc000000, 0x7, 0xd000000, 0xa000000, 0x5000000, 0x1000000]);
		_wait = MBdInlineUtil.decode(
			[0x1c, 0x1c, 0x47, 0x0, 0x1f848484, 0x5f818180, 0xb07f7f7e, 
			0xc17f7f7e, 0x7, 0xc27e7e7e, 0xb37d7d7c, 0x66787878, 0x266b6b6a, 0x4000000, 
			0x1000000, 0x1d, 0x0, 0xf888888, 0x9f808080, 0xef878786, 0xffafafae, 
			0xffd7d7d6, 0x9, 0xffdfdfde, 0xffd7d7d6, 0xffafafae, 0xf1868686, 0xa9797978, 
			0x1e444444, 0x6000000, 0x1000000, 0x17, 0x0, 0x2f828282, 0xdf808080, 
			0xffafafae, 0xfff7f7f6, 0xffafafae, 0xff5f5f5e, 0x5, 0xff3f3f3e, 0xff000000, 
			0xff3f3f3e, 0xff5f5f5e, 0xffafafae, 0xfff7f7f6, 0xffafafae, 0xe67c7c7c, 0x49545454, 
			0xd000000, 0x2000000, 0x13, 0x0, 0xf888888, 0xdf808080, 0xffcfcfce, 
			0xffdfdfde, 0xff3f3f3e, 0x11, 0xff000000, 0xff3f3f3e, 0xffdfdfde, 0xffcfcfce, 
			0xe87b7b7a, 0x37252524, 0xf000000, 0x2000000, 0x11, 0x0, 0xcf808080, 
			0xffafafae, 0xffdfdfde, 0xff0f0f0e, 0xff000000, 0xff2f2f2e, 0xff9f9f9e, 0x5, 
			0xffbfbfbe, 0xff000000, 0xffbfbfbe, 0xff9f9f9e, 0xff2f2f2e, 0xff000000, 0xff0f0f0e, 
			0xffdfdfde, 0xffafafae, 0xde777776, 0x2b000000, 0xd000000, 0x1000000, 0xd, 
			0x0, 0x7f808080, 0xffa7a7a6, 0xffefefee, 0xff2f2f2e, 0xff000000, 0xff8f8f8e, 
			0x9, 0xfffffffe, 0xff000000, 0xfffffffe, 0x5, 0xffcfcfce, 0xff8f8f8e, 
			0xff000000, 0xff2f2f2e, 0xffefefee, 0xffa7a7a6, 0xa6626262, 0x25000000, 0x9000000, 
			0xb, 0x0, 0xf888888, 0xef878786, 0xffefefee, 0xff3f3f3e, 0xff000000, 
			0xff5f5f5e, 0xf, 0xfffffffe, 0xff1f1f1e, 0xff9f9f9e, 0xfffffffe, 0xff5f5f5e, 
			0xff000000, 0xff3f3f3e, 0xffefefee, 0xf6838382, 0x4e1a1a1a, 0x1a000000, 0x4000000, 
			0x9, 0x0, 0x6f818180, 0xffb7b7b6, 0xffbfbfbe, 0xff000000, 0xff1f1f1e, 
			0xf, 0xfffffffe, 0xff7f7f7e, 0xff2f2f2e, 0x7, 0xfffffffe, 0xff1f1f1e, 
			0xff000000, 0xffbfbfbe, 0xffb7b7b6, 0xa4575756, 0x30000000, 0xc000000, 0x9, 
			0x0, 0xc07f7f7e, 0xffd7d7d6, 0xff4f4f4e, 0xff000000, 0xff9f9f9e, 0xd, 
			0xfffffffe, 0xffdfdfde, 0xff0f0f0e, 0xffbfbfbe, 0x7, 0xfffffffe, 0xff9f9f9e, 
			0xff000000, 0xff4f4f4e, 0xffd7d7d6, 0xda707070, 0x46000000, 0x19000000, 0x3000000, 
			0x7, 0x0, 0xef808080, 0xfffffffe, 0xff0f0f0e, 0xff000000, 0xffdfdfde, 
			0xd, 0xfffffffe, 0xff4f4f4e, 0xff5f5f5e, 0x9, 0xfffffffe, 0xffdfdfde, 
			0xff000000, 0xff0f0f0e, 0xfffffffe, 0xf67c7c7c, 0x58000000, 0x27000000, 0x7000000, 
			0x7, 0x0, 0xff808080, 0xfffffffe, 0x5, 0xff000000, 0xd, 
			0xfffffffe, 0xffbfbfbe, 0xff0f0f0e, 0xffefefee, 0xb, 0xfffffffe, 0x5, 
			0xff000000, 0xfffffffe, 0xff808080, 0x64000000, 0x32000000, 0xa000000, 0x7, 
			0x0, 0xff808080, 0xfffffffe, 0x9, 0xff000000, 0x9, 0xfffffffe, 
			0xffbfbfbe, 0xff000000, 0xff8f8f8e, 0x7, 0xfffffffe, 0x9, 0xff000000, 
			0xfffffffe, 0xff808080, 0x6a000000, 0x38000000, 0xc000000, 0x7, 0x0, 
			0xf07f7f7e, 0xfff7f7f6, 0xff0f0f0e, 0xff000000, 0xffdfdfde, 0xd, 0xfffffffe, 
			0xffcfcfce, 0xff1f1f1e, 0xff4f4f4e, 0xffefefee, 0x5, 0xfffffffe, 0xffdfdfde, 
			0xff000000, 0xff0f0f0e, 0xfff7f7f6, 0xf77c7c7c, 0x6c000000, 0x39000000, 0xc000000, 
			0x7, 0x0, 0xc37d7d7c, 0xffdfdfde, 0xff4f4f4e, 0xff000000, 0xff9f9f9e, 
			0xf, 0xfffffffe, 0xffefefee, 0xff4f4f4e, 0xff1f1f1e, 0xffcfcfce, 0xfffffffe, 
			0xff9f9f9e, 0xff000000, 0xff4f4f4e, 0xffdfdfde, 0xde6e6e6e, 0x69000000, 0x37000000, 
			0xc000000, 0x7, 0x0, 0x76797978, 0xffb7b7b6, 0xff9f9f9e, 0xff000000, 
			0xff2f2f2e, 0x13, 0xfffffffe, 0xff9f9f9e, 0xffcfcfce, 0xfffffffe, 0xff2f2f2e, 
			0xff000000, 0xff9f9f9e, 0xffb7b7b6, 0xb44f4f4e, 0x62000000, 0x31000000, 0xa000000, 
			0x7, 0x0, 0x27696968, 0xff878786, 0xfff7f7f6, 0xff2f2f2e, 0xff000000, 
			0xff8f8f8e, 0x15, 0xfffffffe, 0xff8f8f8e, 0xff000000, 0xff2f2f2e, 0xfff7f7f6, 
			0xff878786, 0x871e1e1e, 0x56000000, 0x26000000, 0x7000000, 0x7, 0x0, 
			0x4000000, 0xaa787878, 0xffb7b7b6, 0xffdfdfde, 0xff0f0f0e, 0xff000000, 0xff7f7f7e, 
			0x9, 0xfffffffe, 0xff000000, 0x7, 0xfffffffe, 0xff7f7f7e, 0xff000000, 
			0xff0f0f0e, 0xffdfdfde, 0xffb7b7b6, 0xce636362, 0x6f000000, 0x46000000, 0x18000000, 
			0x3000000, 0x7, 0x0, 0x1000000, 0x1f424242, 0xe67c7c7c, 0x5, 
			0xffcfcfce, 0xff2f2f2e, 0xff000000, 0xff4f4f4e, 0xffbfbfbe, 0x5, 0xfffffffe, 
			0xff000000, 0xfffffffe, 0xffbfbfbe, 0xff4f4f4e, 0xff000000, 0xff2f2f2e, 0x5, 
			0xffcfcfce, 0xef777776, 0x80101010, 0x5f000000, 0x31000000, 0xd000000, 0x1000000, 
			0x9, 0x0, 0x6000000, 0x49545454, 0xf47d7d7c, 0xffb7b7b6, 0xffefefee, 
			0xff2f2f2e, 0x11, 0xff000000, 0xff2f2f2e, 0xffefefee, 0xffb7b7b6, 0xf77c7c7c, 
			0x932a2a2a, 0x6a000000, 0x44000000, 0x1b000000, 0x4000000, 0xb, 0x0, 
			0x1000000, 0xd000000, 0x37252524, 0xde777776, 0xffafafae, 0xfff7f7f6, 0xff9f9f9e, 
			0xff2f2f2e, 0x9, 0xff000000, 0xff2f2f2e, 0xff9f9f9e, 0xfff7f7f6, 0xffafafae, 
			0xe7737372, 0x82101010, 0x6c000000, 0x4c000000, 0x25000000, 0xa000000, 0xf, 
			0x0, 0x2000000, 0x10000000, 0x38242424, 0xb1676766, 0xff8f8f8e, 0xffc7c7c6, 
			0xffefefee, 0x9, 0xfffffffe, 0xffefefee, 0xffc7c7c6, 0xff8f8f8e, 0xc65d5d5c, 
			0x7f101010, 0x67000000, 0x4a000000, 0x27000000, 0xd000000, 0x2000000, 0x11, 
			0x0, 0x2000000, 0xe000000, 0x27000000, 0x5c2c2c2c, 0xb9636362, 0xf67c7c7c, 
			0x9, 0xff808080, 0xf77c7c7c, 0xc65d5d5c, 0x891e1e1e, 0x70000000, 0x5d000000, 
			0x41000000, 0x22000000, 0xb000000, 0x2000000, 0x15, 0x0, 0x1000000, 
			0xa000000, 0x1d000000, 0x35000000, 0x4c000000, 0x5f000000, 0x69000000, 0x7, 
			0x6c000000, 0x68000000, 0x5c000000, 0x48000000, 0x31000000, 0x19000000, 0x8000000, 
			0x1000000, 0x19, 0x0, 0x1000000, 0x5000000, 0xf000000, 0x1e000000, 
			0x2d000000, 0x37000000, 0x39000000, 0x3a000000, 0x39000000, 0x36000000, 0x2b000000, 
			0x1b000000, 0xd000000, 0x4000000, 0x21, 0x0, 0x1000000, 0x5000000, 
			0x9000000, 0xc000000, 0x7, 0xd000000, 0xb000000, 0x8000000, 0x4000000, 
			0x1000000, 0x81, 0x0, 0x0]);
	}
}